name: build and deploy jhipster application
on: [push, pull_request]

jobs:
  publish-docker:
    name: Publish Docker
    if: contains(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/tags/')
    concurrency:
      group: deployment
    runs-on: self-hosted
    permissions:
      contents: read
      packages: write

    env:
      DOCKER_HOST: 'tcp://127.0.0.1:2375'
      DOCKER_DRIVER: overlay2

    services:
      docker:
        image: docker:dind
        options: >-
          --privileged
          --env DOCKER_TLS_CERTDIR=
        ports:
          - 2375:2375

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Wait for Docker Daemon
        run: |
          for i in {1..10}; do
            if docker info; then break; fi
            echo "Waiting for Docker Daemon..."; sleep 3
          done

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Compute a strictly-lowercase image ref once and export to $IMAGE
      - name: Compute IMAGE (lowercase)
        run: |
          echo "IMAGE=ghcr.io/${GITHUB_REPOSITORY,,}" >> "$GITHUB_ENV"

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-v1-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-v1-

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: node_modules-

      - name: Build and push Docker image to ghcr
        run: |
          echo "pushing $IMAGE:${GITHUB_SHA} (and :latest)"
          ./mvnw -ntp clean compile jib:build -DskipTests -Pprod \
            -Djib.to.auth.username=${GITHUB_ACTOR} \
            -Djib.to.auth.password=${{ secrets.GITHUB_TOKEN }} \
            -Djib.to.image=$IMAGE:${GITHUB_SHA} \
            -Djib.to.tags=latest \
            -Dmaven.repo.local=$MAVEN_USER_HOME
        env:
          MAVEN_USER_HOME: ~/.m2/repository

  deploy-dev:
    name: deploy development app via ssh
    runs-on: self-hosted
    needs: publish-docker
    if: success() && ( contains(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/tags/') )
    concurrency:
      group: deployment
    env:
      RSA_PRIVATE_KEY: ${{ secrets.RSA_PRIVATE_KEY }}
      URL: '${{ github.event.repository.name }}.bham.team'
      DEVURL: '${{ github.event.repository.name }}.dev.bham.team'
      ACME: 'https://acme-v02.api.letsencrypt.org/directory'
      ACME_STAGING: 'https://acme-staging-v02.api.letsencrypt.org/directory'
      CI_REGISTRY_USER: ${{ github.actor }}
      CI_REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
      CI_REGISTRY: ghcr.io

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Compute IMAGE (lowercase)
        run: |
          echo "IMAGE=ghcr.io/${GITHUB_REPOSITORY,,}" >> "$GITHUB_ENV"

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "$RSA_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/id_rsa

      - name: Add SSH known hosts
        run: ssh-keyscan -H ${{ secrets.DEPLOY_IP }} >> ~/.ssh/known_hosts

      - name: Save CI variables for transfer
        run: |
          echo CI_REGISTRY_USER=${{ env.CI_REGISTRY_USER }} \
               CI_REGISTRY_PASSWORD=${{ env.CI_REGISTRY_PASSWORD }} \
               CI_REGISTRY_IMAGE=$IMAGE \
               CI_COMMIT_TAG=${GITHUB_SHA} \
               CI_REGISTRY=${{ env.CI_REGISTRY }} \
               ACME=${{ env.ACME }} \
               DEVURL=${{ env.DEVURL }} \
               URL=${{ env.URL }} \
               DEPLOY_IP=${{ secrets.DEPLOY_IP }} \
               EMAIL=${{ github.event.head_commit.author.email || 'noreply@github.com' }} \
               > src/main/docker/.env

      - name: Install Docker and prepare the server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_IP }} "
            rm -rf ~/team-project || true
            which docker || sh team-project/install-docker.sh
          "

      - name: Transfer files to the server
        run: scp -o StrictHostKeyChecking=no -r src/main/docker/ ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_IP }}:~/team-project

      - name: Install app on the server
        run: ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_IP }} "sh team-project/install-app.sh"

      - name: Deploy and clean Docker
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_IP }} "
            docker compose -f ~/team-project/dev.yml up -d
            docker system prune --force --filter 'until=24h'
          "

  deploy-prod:
    name: deploy production version via ssh
    runs-on: self-hosted
    needs: deploy-dev
    if: success() && startsWith(github.ref, 'refs/tags/')
    concurrency:
      group: deployment
    env:
      RSA_PRIVATE_KEY: ${{ secrets.RSA_PRIVATE_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "$RSA_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/id_rsa

      - name: Add SSH known hosts
        run: ssh-keyscan -H ${{ secrets.DEPLOY_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to production
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_IP }} "
            docker compose -f ~/team-project/prd.yml up -d
            docker system prune --force --filter 'until=24h'
          "
